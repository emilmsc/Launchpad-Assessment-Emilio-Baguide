AWSTemplateFormatVersion: "2010-09-09"
Description: Business Unit 1 Stack Template
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Business Unit"
        Parameters:
          - BusinessUnit
      - Label:
          default: "Deployment Environment"
        Parameters:
          - EnvironmentName
      - Label:
          default: "VPC Required Parameters"
        Parameters:
          - BU1VPCCIDR
          - SubnetPublic1CIDR
          - SubnetPublic2CIDR
          - SubnetApp1CIDR
          - SubnetApp2CIDR
      - Label:
          default: "CloudFront Required Parameters"
        Parameters:
          - DomainName
          - ALBDNSName
          - HostedzoneID
      - Label:
          default: "Auto Scaling Required Parameters"
        Parameters:
          - NotificationEmail
          - SSHLocation
          - WebAsgMax
          - WebAsgMin
          - WebDesired
          - EC2InstanceAMI
          - EC2InstanceClass
          - EFSFileSystemDNSName

# -----------------------------PARAMETERS SECTION------------------------

Parameters:
  BusinessUnit:
    Description: Identify the business unit that deploys this resource
    Type: String
    Default: BU1
  EnvironmentName:
    Description: Defines the deployment environment
    Type: String
    MaxLength: 256
    AllowedValues:
      - Production
      - Staging
      - Development
    Default: Development

  VPCBU1CIDR:
    Description: Please enter the IP block (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."
  SubnetPublic1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public1 subnet.
    Type: String
    Default: 10.0.1.0/24
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."
  SubnetPublic2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public2 subnet.
    Type: String
    Default: 10.0.2.0/24
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."
  SubnetApp1CIDR:
    Description: Please enter the IP range (CIDR notation) for the aplication1 subnet.
    Type: String
    Default: 10.0.3.0/24
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."
  SubnetApp2CIDR:
    Description: Please enter the IP range (CIDR notation) for the aplication2 subnet.
    Type: String
    Default: 10.0.4.0/24
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

  PeerRequesterAccountId:
      Type: String
      Default: 522653425719

  # Elastic File System (EFS) Parameters
  EFSFileSystemDNSName:
    Description: Name of an existing stack from where we want to import EFS id
    Type: String
    Default: EfsDNSName

  # Loadbalancer Parameters
  DomainName:
    Type: String
    Default: ftime.uk
  ALBDNSName:
    Description: SSM Parameter for ALB DNS Name in N.Virginia
    Type: String
    Default: ALBDNSName

  # CloudFront Paremeters
  HostedzoneID:
    Type: String
    Default: Z00812311DVHTGQEFJQK

  # Auto Scaling Group Parameters
  NotificationEmail:
    Description: Email to receive notifications from SNS.
    Type: String
    Default: bu1frontend@ebaguide.com
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: "0.0.0.0/0"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
  WebAsgMax:
    AllowedPattern: ^((?!0$)[1-2]?[0-9]|30)$
    ConstraintDescription: Must be a number between 1 and 30.
    Default: 4
    Description: Specifies the maximum number of EC2 instances in the Web Autoscale Group.
    Type: String
  WebAsgMin:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 2
    Description: Specifies the minimum number of EC2 instances in the Web Autoscale Group.
    Type: String
  WebDesired:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 2
    Description: Specifies the desired capacity of EC2 instances in the Web Autoscale Group.
    Type: String
  EC2InstanceClass:
    Description: EC2 instance class - only small
    Type: String
    AllowedValues:
      - t3.medium
      - t3.small
      - t3.micro
      - t2.micro
    Default: t2.micro
  EC2InstanceAMI:
    Description: EC2 instance class - only small
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2'

Resources:

  # VPC Resources
  VPCBU1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCBU1CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join [ "",[ !Ref "BusinessUnit","-VPC" ] ]

  TransitGateway:
    Type: "AWS::EC2::TransitGateway"
    Properties:
      Description: "TGW Route Integration"
      AmazonSideAsn: 65000
      AutoAcceptSharedAttachments: "enable"
      DefaultRouteTableAssociation: "enable"
      DefaultRouteTablePropagation: "enable"
      DnsSupport: "enable"
      VpnEcmpSupport: "enable"
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Name
        Value: BU1-tgw-us-east-1

  InternetGatewayforVPCBU1:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "",[!Ref "EnvironmentName","-IG"] ]

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGatewayforVPCBU1
      VpcId: !Ref VPCBU1

# Subnets
  SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      VpcId: !Ref VPCBU1
      CidrBlock: !Ref SubnetPublic1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ "Public-",!Select [ 0, !GetAZs  '' ] ] ]

  SubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      VpcId: !Ref VPCBU1
      CidrBlock: !Ref SubnetPublic2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ "Public-",!Select [ 1, !GetAZs  '' ] ] ]

  SubnetApp1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      VpcId: !Ref VPCBU1
      CidrBlock: !Ref SubnetApp1CIDR
      Tags:
        - Key: Name
          Value: !Join [ "", [ "App-",!Select [ 0, !GetAZs  '' ] ] ]

  SubnetApp2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      VpcId: !Ref VPCBU1
      CidrBlock: !Ref SubnetApp2CIDR
      Tags:
        - Key: Name
          Value: !Join [ "", [ "App-",!Select [ 1, !GetAZs  '' ] ] ]

# Route table public, associate subnet and create route
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCBU1
      Tags:
        - Key: Name
          Value: public-rt

  RouteTablePublic1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic1
  RouteTablePublic2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic2

  RoutePublicDefault:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayforVPCBU1

  RouteTablePrivate1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCBU1
      Tags:
        - Key: Name
          Value: private-rt-1a

  RouteTablePrivate2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCBU1
      Tags:
        - Key: Name
          Value: private-rt-1b

  AppSubnet1RouteTablePrivateAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      SubnetId: !Ref SubnetApp1

  AppSubnet2RouteTablePrivateAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate2
      SubnetId: !Ref SubnetApp2

#----------------EFS--------------

  MountTargetSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: !Sub "${AWS::StackName}-SGforEFS"
        GroupDescription: "Security group for EFS - NFS port 2049"
        VpcId: !Ref VPCBU1
        SecurityGroupIngress:
        # restrict access only to app ranges
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: !Ref SubnetApp1CIDR
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: !Ref SubnetApp2CIDR
        Tags:
          - Key: Name
            Value: !Sub "$BusinessUnit}-SG-EFS"

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      # KmsKeyId: String
      # Prevent anonymous access and Enforce in-transit encryption for all clients
      FileSystemPolicy:
        {
            "Version": "2012-10-17",
            "Id": {"Fn::Sub": "${BusinessUnit}-efs-policy1"},
            "Statement": [
                {
                    "Sid": {"Fn::Sub": "${BusinessUnit}-efs-statement1"},
                    "Effect": "Allow",
                    "Principal": {
                        "AWS": "*"
                    },
                    "Action": [
                        "elasticfilesystem:ClientRootAccess",
                        "elasticfilesystem:ClientMount",
                        "elasticfilesystem:ClientWrite"
                    ],
                    "Condition": {
                        "Bool": {
                            "elasticfilesystem:AccessedViaMountTarget": "true"
                        }
                    }
                }
            ]
        }
      ThroughputMode: bursting
      BackupPolicy:
        Status: ENABLED
      FileSystemTags:
      - Key: Name
        Value: !Sub "${BusinessUnit}-HttpVolume"

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref SubnetApp1
      SecurityGroups:
        - !Ref MountTargetSecurityGroup

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref SubnetApp2
      SecurityGroups:
        - !Ref MountTargetSecurityGroup

  # Store Parameters in System Manager Store
  ParEfsDNSName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "EfsDNSName"
      Type: String
      Value:
        Fn::Sub: "${FileSystem}.efs.${AWS::Region}.amazonaws.com"

  #Application Load Balancer

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${BusinessUnit}-SG-ALB"
      GroupDescription: "Open Ports 80 and 443 for Web Servers"
      VpcId: !Ref VPCBU1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${BusinessUnit}-SG-ALB"

  LoadBalancerBU1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      IpAddressType: ipv4
      Name: !Sub "${BusinessUnit}-LoadBalancer"
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
      Type: application

  AlbTargetGroup80BU1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /index.php
      HealthCheckTimeoutSeconds: 20
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: !Sub "${BusinessUnit}-ALBTG80"
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPCBU1

  AlbTargetGroup443BU1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /index.php
      HealthCheckTimeoutSeconds: 5
      Port: 443
      Protocol: HTTPS
      Tags:
      - Key: Name
        Value: !Sub "${BusinessUnit}-ALBTG443"
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPCBU1

  PublicAppLoadBalancerListener80:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: fixed-response
        FixedResponseConfig:
          StatusCode: 403
          ContentType: text/plain
          MessageBody: 'Access denied'
        # TargetGroupArn: !Ref AlbTargetGroup80BU1
      LoadBalancerArn: !Ref LoadBalancerBU1
      Port: 80
      Protocol: HTTP

  ListenerHTTPCustomHeader:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions: # Required
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup80BU1
      Conditions: # Required
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header
            Values:
              - custom-value-gdhsjdgaj-34235
      ListenerArn: !Ref PublicAppLoadBalancerListener80
      Priority: 1

  # PublicAppLoadBalancerListener443:
  #   Type : AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     Certificates: !Ref ListenerCertificate
  #     SslPolicy: ELBSecurityPolicy-2016-08
  #     DefaultActions:
  #     - Type: forward
  #       TargetGroupArn: !Ref AlbTargetGroup443BU1
  #     LoadBalancerArn: !Ref LoadBalancerBU1
  #     Port: 443
  #     Protocol: HTTPS

# Store Parameters in System Manager Store
  ParALBStack:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "ALBStackName"
      Type: String
      Value: !Ref "AWS::StackName"

  ParALBSecurityGroup:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "ALBSecurityGroup"
      Type: String
      Value: !Ref LoadBalancerSecurityGroup

  ParALBDNSName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "ALBDNSName"
      Type: String
      Value: !GetAtt LoadBalancerBU1.DNSName

# CloudFront Resources------------------------------------------------------

##---Use the section below to create a brand new hostedzone and new recordset
#  HostedZone:
#    Type: "AWS::Route53::HostedZone"
#    Properties:
#      Name: !Ref DomainName
#
#  DNSRecord1:
#    Type: AWS::Route53::RecordSet
#    Properties:
#      Name: !Ref DomainName
#      Type: A
#      HostedZoneId: !GetAtt HostedZone.Id
#      AliasTarget:
#        DNSName: !GetAtt CloudFrontDistribution.DomainName
#        HostedZoneId: Z2FDTNDATAQYW2 # AWS provided value, must be used here


#---Use the section below to use existing Hostedzone
  DNSRecord1:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName
      Type: A
      HostedZoneId: !Ref HostedzoneID #!GetAtt HostedZone.Id
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # AWS provided value, must be used here

  ACMCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedzoneID
      ValidationMethod: DNS

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: LoadBalancerBU1
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        WebACLId: !GetAtt WebACL.Arn
        ViewerCertificate:
          AcmCertificateArn: !Ref ACMCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt LoadBalancerBU1.DNSName #Fn::ImportValue: "ALBDNSName"
            Id: !Ref LoadBalancerBU1
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.2
            OriginCustomHeaders:
              - HeaderName: X-Custom-Header
                HeaderValue: custom-value-gdhsjdgaj-34235
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          TargetOriginId: !Ref LoadBalancerBU1
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad #CachingDisabled
          ViewerProtocolPolicy: redirect-to-https
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Scope: CLOUDFRONT
      Description: WAFv2 ACL
      DefaultAction:
        Allow: { }
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: "WebACLMetric"
      Rules:
        - Name: RuleWithAWSManagedRules
          Priority: 0
          OverrideAction:
            Count: { }
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: "RuleWithAWSManagedRulesMetric"
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              ExcludedRules: [ ]
        - Name: BlockXssAttack
          Priority: 1
          Action:
            Block: { }
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: "BlockXssAttackMetric"
          Statement:
            XssMatchStatement:
              FieldToMatch:
                AllQueryArguments: { }
              TextTransformations:
                - Priority: 1
                  Type: NONE
#---ASG Resources

# Create security group associated with VPC from different stack
  ASGSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${BusinessUnit}-ASG-SG"
      GroupDescription: "Open Ports 22 and 80 for Web Servers"
      VpcId: !Ref VPCBU1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${BusinessUnit}-ASG-SG"

# IAM role, policy, profile
  EC2ManagementRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Description: "IAM Role for EC2 management via SSM Agent"
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy' # Permissions required to use AmazonCloudWatchAgent on servers
      Policies:
        - PolicyName: !Sub "${BusinessUnit}-PolicySSMAgent"
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ssm:DescribeAssociation",
                          "ssm:GetDeployablePatchSnapshotForInstance",
                          "ssm:GetDocument",
                          "ssm:DescribeDocument",
                          "ssm:GetManifest",
                          "ssm:GetParameter",
                          "ssm:GetParameters",
                          "ssm:ListAssociations",
                          "ssm:ListInstanceAssociations",
                          "ssm:PutInventory",
                          "ssm:PutComplianceItems",
                          "ssm:PutConfigurePackageResult",
                          "ssm:UpdateAssociationStatus",
                          "ssm:UpdateInstanceAssociationStatus",
                          "ssm:UpdateInstanceInformation"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ssmmessages:CreateControlChannel",
                          "ssmmessages:CreateDataChannel",
                          "ssmmessages:OpenControlChannel",
                          "ssmmessages:OpenDataChannel"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ec2messages:AcknowledgeMessage",
                          "ec2messages:DeleteMessage",
                          "ec2messages:FailMessage",
                          "ec2messages:GetEndpoint",
                          "ec2messages:GetMessages",
                          "ec2messages:SendReply"
                      ],
                      "Resource": "*"
                  }
              ]
            }
      RoleName: !Sub "${BusinessUnit}-SSMRole"

  WEBServerIAMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${BusinessUnit}-ASG-InstancesProfile"
      Path: "/"
      Roles:
        - !Ref EC2ManagementRole

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationEmail
          Protocol: email

  ASGLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deploy_addons:
            - cloudwatch_config
        cloudwatch_config:
          packages:
            yum:
              # Cloudwatch for system monitoring
              amazon-cloudwatch-agent: []
          files:
            /tmp/create_agent_files.sh:
              content:
                Fn::Sub: |
                  #!/bin/bash -xe
                  # ===============================================================
                  # CloudWatch agent config
                  # ===============================================================
                  cat > /opt/aws/amazon-cloudwatch-agent/etc/config.json <<"EOF"
                  {
                    "agent": {
                      "metrics_collection_interval": 60,
                      "region": "${AWS::Region}",
                      "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                      "debug": false,
                      "run_as_user": "root"
                    },
                    "logs": {
                      "logs_collected": {
                        "files": {
                          "collect_list": [
                            {
                              "file_path": "/var/log/httpd/error_log",
                              "log_group_name": "error",
                              "log_stream_name": "{instance_id}_{ip_address}_httpd",
                              "retention_in_days": -1
                            },
                            {
                              "file_path": "/var/log/php-fpm/error.log",
                              "log_group_name": "error",
                              "log_stream_name": "{instance_id}_{ip_address}_php",
                              "retention_in_days": -1
                            }
                            {
                              "file_path": "/var/log/secure",
                              "log_group_name": "secure",
                              "log_stream_name": "{instance_id}_{ip_address}_php",
                              "retention_in_days": -1
                            }
                            {
                              "file_path": "/var/log/audit/audit.log",
                              "log_group_name": "audit",
                              "log_stream_name": "{instance_id}_{ip_address}_php",
                              "retention_in_days": -1
                            }
                            {
                              "file_path": "/var/log/cloud-init-output.log",
                              "log_group_name": "init",
                              "log_stream_name": "{instance_id}_{ip_address}_php",
                              "retention_in_days": -1
                            }
                          ]
                        }
                      }
                    },
                    "metrics": {
                      "namespace": "${AWS::StackName}",
                      "append_dimensions": {
                        "AutoScalingGroupName": "${!aws:AutoScalingGroupName}"
                      },
                      "metrics_collected": {
                        "disk": {
                          "measurement": [
                            "used_percent"
                          ],
                          "metrics_collection_interval": 60,
                          "resources": [
                            "*"
                          ]
                        },
                        "mem": {
                          "measurement": [
                            "mem_used_percent"
                          ],
                          "metrics_collection_interval": 60
                        },
                        "processes": {
                          "measurement": [
                            "running",
                            "sleeping",
                            "dead"
                          ]
                        },
                        "procstat": [
                          {
                            "pid_file": "/var/run/httpd/httpd.pid",
                            "measurement": [
                              "cpu_usage",
                              "memory_rss"
                            ]
                          },
                          {
                            "pid_file": "/var/run/php-fpm/php-fpm.pid",
                            "measurement": [
                              "cpu_usage",
                              "memory_rss"
                            ]
                          }
                        ]
                      }
                    }
                  }
                  EOF
                  sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/config.json
              mode: 000500
              owner: root
              group: root
          commands:
            01_enable_amazon-cloudwatch-agent:
              command: systemctl enable amazon-cloudwatch-agent
            02_configure_amazon-cloudwatch-agent:
              command: ./create_agent_files.sh
              cwd: /tmp
              ignoreErrors: false
    Properties:
      LaunchTemplateName: !Sub ${BusinessUnit}-ASGLaunchTemplate
      LaunchTemplateData:
        IamInstanceProfile: # IAM Management profile
          Arn: !GetAtt WEBServerIAMProfile.Arn
        ImageId: !Ref EC2InstanceAMI
        InstanceType: !Ref EC2InstanceClass
        SecurityGroupIds:
          - !Ref ASGSecurityGroup
        UserData:
          Fn::Base64:
            #Function Sub MUST be added if we want to use variables AWS::StackName and AWS::Region
            Fn::Sub: |
              #!/bin/bash -xe
              echo 'Set language and country-specific setting'
              sudo localectl set-locale LANG=en_US.UTF-8
              cat > /etc/environment <<"EOF"
              LANG=en_US.utf-8
              LC_ALL=en_US.utf-8
              EOF
              echo 'Update system'
              yum update -y
              yum install -y aws-cfn-bootstrap
              systemctl start amazon-ssm-agent
              # Install Apache Web Server and PHP
              yum install -y httpd mysql
              amazon-linux-extras install -y php7.2
              # mount file system
              yum install -y amazon-efs-utils
              new_file_system="${EFSFileSystemDNSName}:/ /var/www/html/ nfs defaults,_netdev 0 0"
              echo $new_file_system | sudo  tee -a  /etc/fstab
              mount -fav
              mount -t efs $EFSFileSystemDNSName /var/www/html/
              # Download Lab files
              wget https://testaj09.s3.amazonaws.com/image-resizer-app.zip
              unzip -n image-resizer-app.zip -d /var/www/html/
              # Download and install the AWS SDK for PHP
              wget https://docs.aws.amazon.com/aws-sdk-php/v3/download/aws.zip
              unzip -n aws -d /var/www/html
              # add API gateway id to the code
              cat /var/www/html/call-api.php
              #
              PARAPIID=$(aws --region=eu-central-1 ssm get-parameter --name "/API/Id" --output text --query Parameter.Value)
              PARAPISTAGE=$(aws --region=eu-central-1 ssm get-parameter --name "/API/StageName" --output text --query Parameter.Value)
              PARS3BUCKETNAME=$(aws --region=eu-central-1 ssm get-parameter --name "/s3/photobucketName" --output text --query Parameter.Value)
              sed -i "s/api-id/$PARAPIID/g" /var/www/html/call-api.php
              sed -i "s/region-name/${AWS::Region}/g" /var/www/html/call-api.php
              sed -i "s/stage-name/$PARAPISTAGE/g" /var/www/html/call-api.php
              sed -i "s/bucket-name/$PARS3BUCKETNAME/g" /var/www/html/call-api.php
              #
              cat /var/www/html/call-api.php
              #give permissions to apache user
              usermod -a -G apache ec2-user
              chown -R ec2-user:apache /var/www
              chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
              find /var/www -type f -exec sudo chmod 0664 {} \;
              # Turn on web server
              chkconfig httpd on
              service httpd start
              /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource WebServerTemplate --configsets deploy_addons --region ${AWS::Region}
              /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebAutoscaleGroup --region ${AWS::Region}

  ASGAutoscaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${BusinessUnit}-ASG"
      VPCZoneIdentifier:
        - !Ref SubnetApp1
        - !Ref SubnetApp2
      HealthCheckGracePeriod: 620
      HealthCheckType: ELB #EC2
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupTotalCapacity
            - GroupTotalInstances
      LaunchTemplate:
        LaunchTemplateId: !Ref ASGLaunchTemplate
        Version: !GetAtt ASGLaunchTemplate.LatestVersionNumber
      MaxSize: !Ref WebAsgMax
      MinSize: !Ref WebAsgMin
      DesiredCapacity: !Ref WebDesired
      NotificationConfigurations:
        - TopicARN: !Ref NotificationTopic
          NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      TargetGroupARNs:
        - !Ref AlbTargetGroup80BU1
      Tags:
        - Key: Type
          Value: !Sub "${AWS::StackName}-WebServerInstance"
          PropagateAtLaunch: True
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASGAutoscaleGroup
      Cooldown: 60
      ScalingAdjustment: 1

  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASGAutoscaleGroup
      Cooldown: 60
      # The scaling adjustment will remove one server
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ASGAutoscaleGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 50% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 50
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ASGAutoscaleGroup
      ComparisonOperator: LessThanThreshold
  
  # SSM exported Parameters 
  pStackName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "VPCStackName"
      Type: String
      Value:
        Fn::Sub: '${AWS::StackName}'   
  pVPCID:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "BU1VPCID"
      Type: String
      Value: !Ref VPCBU1     
  pTransitGatewayID:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "TransitGatewayID"
      Type: String
      Value: !Ref TransitGateway


Outputs:

  StackName:
    Description: A name of the Stack
    Value: !Ref AWS::StackName
  VPC:
    Description: VPC Id
    Value: !Ref VPCBU1
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}::VPCId'
  VPCCIDR:
    Description: VPC CIDR block
    Value: !Ref VPCBU1CIDR
 #EFS output
  FileSystemID:
    Description: File system ID
    Value: !Ref FileSystem
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}::EFSInstanceID'
  EFSMountHelper:
    Description: EFS mount helper
    Value: !Sub "sudo mount -t efs -o tls ${FileSystem}:/ /var/www/html"
  MountTarget1ID:
    Description: Mount target 1 ID
    Value: !Ref MountTarget1
  MountTarget2ID:
    Description: Mount target 2 ID
    Value: !Ref MountTarget2

  # Load Balancer output
  PublicAlbTargetGroupArn80:
      Value:
        !Ref AlbTargetGroup80BU1
      Export:
        Name:
          Fn::Sub: '${AWS::StackName}::PublicArnTargetGroup'
  PublicAlbTargetGroupArn443:
    Value:
      !Ref  AlbTargetGroup443BU1
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}::PublicArnTargetGroup443'
  PublicAlbCanonicalHostedZoneId:
    Value:
      !GetAtt LoadBalancerBU1.CanonicalHostedZoneID
  PublicAlbDnsName:
    Value:
      !GetAtt LoadBalancerBU1.DNSName
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}::PublicAlbDNSName'
  PublicAlbFullName:
    Value:
      !GetAtt LoadBalancerBU1.LoadBalancerFullName
  PublicAlbHostname:
    Value:
      Fn::Sub:
        - 'http://${ALBDNS}'
        - ALBDNS: !GetAtt LoadBalancerBU1.DNSName
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}::PublicAlbHostname'
  AlbSecurityGroupId:
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name:
        Fn::Sub: '${AWS::StackName}::AlbSecurityGroupId'
